name: Deploy to VPS via Packagist

on:
  push:
    branches: [main]
    paths:
      - "src/**"
      - "js/**"
      - "less/**"
      - "locale/**"
      - "migrations/**"
      - "composer.json"
      - "composer.lock"
      - "extend.php"

jobs:
  # 等待Packagist更新
  wait-for-packagist:
    runs-on: ubuntu-latest
    name: Wait for Packagist Update
    steps:
      - name: Wait for Packagist to sync
        run: |
          REPO_NAME="${{ github.repository }}"
          COMMIT_SHA="${{ github.sha }}"

          echo "Repository: $REPO_NAME"
          echo "Target commit: ${COMMIT_SHA:0:8}"

          for i in {1..12}; do
            echo "检查第 $i 次..."
            
            # 添加随机参数避免缓存，使用HEAD请求减少数据传输
            CACHE_BUSTER=$(date +%s%N)
            RESPONSE=$(curl -s -H "Cache-Control: no-cache" -H "Pragma: no-cache" \
              "https://packagist.org/packages/${REPO_NAME}.json?t=${CACHE_BUSTER}")
            
            if [[ -n "$RESPONSE" && "$RESPONSE" != *"\"status\":404"* ]]; then
              DEV_MAIN_REF=$(echo "$RESPONSE" | jq -r '.package.versions["dev-main"].source.reference // empty')
              SYNC_TIME=$(echo "$RESPONSE" | jq -r '.package.versions["dev-main"].time // empty')
              
              echo "Packagist commit: ${DEV_MAIN_REF:0:8}"
              echo "Sync time: $SYNC_TIME"
              
              if [[ "$DEV_MAIN_REF" == "$COMMIT_SHA" ]]; then
                echo "✅ Packagist已同步最新版本!"
                break
              fi
            else
              echo "⚠️ 无法获取Packagist信息"
            fi
            
            if [ $i -eq 12 ]; then
              echo "⚠️ Packagist同步超时，继续部署..."
              echo "通常情况下Packagist会在几分钟内完成同步"
              break
            fi
            
            echo "等待15秒后重试..."
            sleep 15
          done

  # 部署到VPS
  deploy:
    needs: wait-for-packagist
    runs-on: ubuntu-latest
    name: Deploy to VPS
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.VPS_HOST }}
          port: ${{ secrets.VPS_PORT }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            set -e

            cd /www/wwwroot/flarum

            sudo -u www composer update --no-dev --optimize-autoloader --no-interaction
            sudo -u www php flarum migrate
            sudo -u www php flarum cache:clear
            sudo -u www php flarum assets:publish
